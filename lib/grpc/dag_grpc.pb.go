// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: dag.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MerkleServiceClient is the client API for MerkleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerkleServiceClient interface {
	SendMerkleRoot(ctx context.Context, in *MerkleRoot, opts ...grpc.CallOption) (*Response, error)
	SendMerkleNode(ctx context.Context, in *MerkleNode, opts ...grpc.CallOption) (*Response, error)
	NotifyCompletion(ctx context.Context, in *MerkleRoot, opts ...grpc.CallOption) (*Reciept, error)
	SendSignedReciept(ctx context.Context, in *SignedReciept, opts ...grpc.CallOption) (*Response, error)
}

type merkleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerkleServiceClient(cc grpc.ClientConnInterface) MerkleServiceClient {
	return &merkleServiceClient{cc}
}

func (c *merkleServiceClient) SendMerkleRoot(ctx context.Context, in *MerkleRoot, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.MerkleService/SendMerkleRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleServiceClient) SendMerkleNode(ctx context.Context, in *MerkleNode, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.MerkleService/SendMerkleNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleServiceClient) NotifyCompletion(ctx context.Context, in *MerkleRoot, opts ...grpc.CallOption) (*Reciept, error) {
	out := new(Reciept)
	err := c.cc.Invoke(ctx, "/grpc.MerkleService/NotifyCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleServiceClient) SendSignedReciept(ctx context.Context, in *SignedReciept, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.MerkleService/SendSignedReciept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerkleServiceServer is the server API for MerkleService service.
// All implementations must embed UnimplementedMerkleServiceServer
// for forward compatibility
type MerkleServiceServer interface {
	SendMerkleRoot(context.Context, *MerkleRoot) (*Response, error)
	SendMerkleNode(context.Context, *MerkleNode) (*Response, error)
	NotifyCompletion(context.Context, *MerkleRoot) (*Reciept, error)
	SendSignedReciept(context.Context, *SignedReciept) (*Response, error)
	mustEmbedUnimplementedMerkleServiceServer()
}

// UnimplementedMerkleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMerkleServiceServer struct {
}

func (UnimplementedMerkleServiceServer) SendMerkleRoot(context.Context, *MerkleRoot) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMerkleRoot not implemented")
}
func (UnimplementedMerkleServiceServer) SendMerkleNode(context.Context, *MerkleNode) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMerkleNode not implemented")
}
func (UnimplementedMerkleServiceServer) NotifyCompletion(context.Context, *MerkleRoot) (*Reciept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyCompletion not implemented")
}
func (UnimplementedMerkleServiceServer) SendSignedReciept(context.Context, *SignedReciept) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedReciept not implemented")
}
func (UnimplementedMerkleServiceServer) mustEmbedUnimplementedMerkleServiceServer() {}

// UnsafeMerkleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerkleServiceServer will
// result in compilation errors.
type UnsafeMerkleServiceServer interface {
	mustEmbedUnimplementedMerkleServiceServer()
}

func RegisterMerkleServiceServer(s grpc.ServiceRegistrar, srv MerkleServiceServer) {
	s.RegisterService(&MerkleService_ServiceDesc, srv)
}

func _MerkleService_SendMerkleRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleServiceServer).SendMerkleRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MerkleService/SendMerkleRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleServiceServer).SendMerkleRoot(ctx, req.(*MerkleRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleService_SendMerkleNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleServiceServer).SendMerkleNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MerkleService/SendMerkleNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleServiceServer).SendMerkleNode(ctx, req.(*MerkleNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleService_NotifyCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerkleRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleServiceServer).NotifyCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MerkleService/NotifyCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleServiceServer).NotifyCompletion(ctx, req.(*MerkleRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleService_SendSignedReciept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedReciept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleServiceServer).SendSignedReciept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MerkleService/SendSignedReciept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleServiceServer).SendSignedReciept(ctx, req.(*SignedReciept))
	}
	return interceptor(ctx, in, info, handler)
}

// MerkleService_ServiceDesc is the grpc.ServiceDesc for MerkleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerkleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MerkleService",
	HandlerType: (*MerkleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMerkleRoot",
			Handler:    _MerkleService_SendMerkleRoot_Handler,
		},
		{
			MethodName: "SendMerkleNode",
			Handler:    _MerkleService_SendMerkleNode_Handler,
		},
		{
			MethodName: "NotifyCompletion",
			Handler:    _MerkleService_NotifyCompletion_Handler,
		},
		{
			MethodName: "SendSignedReciept",
			Handler:    _MerkleService_SendSignedReciept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dag.proto",
}
